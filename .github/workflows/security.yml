name: Security Scan

on:
  push:
    branches: [ main ]
  pull_request:
  schedule:
    # Run daily at 3 AM UTC
    - cron: '0 3 * * *'

jobs:
  dependency-scan:
    runs-on: ubuntu-latest
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.13"
      
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          python -m pip install safety bandit
          python -m pip install -r requirements.txt
          python -m pip install -r requirements-dev.txt
      
      - name: üîç Run Safety check (dependency vulnerabilities)
        run: |
          # Check for known security vulnerabilities in dependencies
          safety check --json --output safety-report.json || true
          
          # Parse and display results
          python - <<'EOF'
          import json
          import sys
          
          try:
              with open('safety-report.json', 'r') as f:
                  report = json.load(f)
              
              vulnerabilities = report.get('vulnerabilities', [])
              
              if vulnerabilities:
                  print("‚ö†Ô∏è  Security vulnerabilities found:")
                  for vuln in vulnerabilities:
                      print(f"\nüì¶ Package: {vuln['package_name']} {vuln['analyzed_version']}")
                      print(f"   Vulnerability: {vuln['vulnerability']}")
                      print(f"   Severity: {vuln.get('severity', 'Unknown')}")
                      print(f"   More info: {vuln.get('more_info_url', 'N/A')}")
                  
                  # Exit with error if critical vulnerabilities
                  critical_vulns = [v for v in vulnerabilities if v.get('severity', '').lower() in ['critical', 'high']]
                  if critical_vulns:
                      print(f"\n‚ùå Found {len(critical_vulns)} critical/high severity vulnerabilities!")
                      sys.exit(1)
                  else:
                      print(f"\n‚ö†Ô∏è  Found {len(vulnerabilities)} lower severity vulnerabilities")
              else:
                  print("‚úÖ No known vulnerabilities found")
          except Exception as e:
              print(f"Error parsing safety report: {e}")
              # Run safety directly for output
              import subprocess
              subprocess.run(["safety", "check"], check=False)
          EOF
      
      - name: üîê Run Bandit security scan (code analysis)
        run: |
          bandit -r luca_core/ app/ tools/ -f json -o bandit-report.json || true
          
          # Parse and display results
          python - <<'EOF'
          import json
          
          try:
              with open('bandit-report.json', 'r') as f:
                  report = json.load(f)
              
              results = report.get('results', [])
              metrics = report.get('metrics', {})
              
              print(f"Bandit Security Scan Results:")
              print(f"Files scanned: {metrics.get('', {}).get('loc', 0)}")
              print(f"Issues found: {len(results)}")
              
              if results:
                  # Group by severity
                  high_issues = [r for r in results if r['issue_severity'] == 'HIGH']
                  medium_issues = [r for r in results if r['issue_severity'] == 'MEDIUM']
                  low_issues = [r for r in results if r['issue_severity'] == 'LOW']
                  
                  if high_issues:
                      print(f"\n‚ùå HIGH severity issues: {len(high_issues)}")
                      for issue in high_issues[:5]:  # Show first 5
                          print(f"  - {issue['test_name']}: {issue['filename']}:{issue['line_number']}")
                  
                  if medium_issues:
                      print(f"\n‚ö†Ô∏è  MEDIUM severity issues: {len(medium_issues)}")
                  
                  if low_issues:
                      print(f"\n‚ÑπÔ∏è  LOW severity issues: {len(low_issues)}")
                  
                  # Fail on high severity issues
                  if high_issues:
                      import sys
                      sys.exit(1)
              else:
                  print("‚úÖ No security issues found")
          except Exception as e:
              print(f"Error parsing bandit report: {e}")
              # Run bandit directly for output
              import subprocess
              subprocess.run(["bandit", "-r", "luca_core/", "app/", "tools/", "-ll"], check=False)
          EOF
      
      - name: üì§ Upload security reports
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: security-reports
          path: |
            safety-report.json
            bandit-report.json
      
      - name: üí¨ Comment on PR
        if: github.event_name == 'pull_request' && failure()
        uses: actions/github-script@v7
        with:
          script: |
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: '‚ùå Security scan failed! Please check the security scan results in the workflow logs.'
            })